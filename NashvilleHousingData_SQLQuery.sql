--CREATE DATABASE NASHVILLEHOUSINGDATA

--USE [NASHVILLEHOUSINGDATA]

---SELECT TOP 100* FROM NASHVILLEHOUSINGTABLE

/*CLEANING DATA IN SQL QUERIES*/

/* STANDARDIZING DATE FORMAT */

SELECT SALEDATE, CONVERT(DATE,SALEDATE)
FROM NASHVILLEHOUSINGTABLE

UPDATE NASHVILLEHOUSINGTABLE
SET SALEDATE =  CONVERT(DATE,SALEDATE)

--IF UPDATE DOESN'T WORK WE WILL ADD A NEW COLUMN , ASSIGN ALL THE DATA FROM SET SALEDATE TO THE NEW COLUMN.
--DELETE THE OLDCOLUMN
--RENAME THE NEW COLUMN

ALTER TABLE NASHVILLEHOUSINGTABLE
ADD CONVERTEDSALEDATE DATE;

UPDATE NASHVILLEHOUSINGTABLE
SET CONVERTEDSALEDATE = CONVERT(DATE,SALEDATE)

ALTER TABLE NASHVILLEHOUSINGTABLE
DROP COLUMN SALEDATE;


EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.CONVERTEDSALEDATE', 'SALEDATE','COLUMN';

--------

/*POPULATE PROPERTY ADDRESS DATA*/

--SO HERE WE POPULATE THE PROPERTYADDRESS WHO HAVE NULL VALUES
--WE ARE CONSIDERING THE PARCELID AND EQUATING ALL THE PARCELID'S...SINCE THE ADDRESS CAN'T BE DIFFERENT FOR THE SAME PARCELID HENCE

SELECT * 
FROM DBO.NASHVILLEHOUSINGTABLE 
--GROUP BY PARCELID

SELECT TABLE1.PARCELID,TABLE1.PropertyAddress,TABLE2.ParcelID,TABLE2.PropertyAddress,ISNULL(TABLE1.PropertyAddress,TABLE2.PropertyAddress)
FROM DBO.NASHVILLEHOUSINGTABLE AS TABLE1
	JOIN DBO.NASHVILLEHOUSINGTABLE AS TABLE2
	ON
		TABLE1.PARCELID = TABLE2.PARCELID AND TABLE1.[UniqueID ] <> TABLE2.[UniqueID ]
	WHERE
		TABLE1.PROPERTYADDRESS IS NULL

UPDATE TABLE1
SET PROPERTYADDRESS = ISNULL(TABLE1.PROPERTYADDRESS, TABLE2.PROPERTYADDRESS)
FROM DBO.NASHVILLEHOUSINGTABLE AS TABLE1
JOIN DBO.NASHVILLEHOUSINGTABLE AS TABLE2
	ON
		TABLE1.[PARCELID] = TABLE2.[PARCELID] AND TABLE1.[UniqueID ]<>TABLE2.[UniqueID ]
	WHERE
		TABLE1.PROPERTYADDRESS IS NULL

-------

/*BREAKING PROPERTY ADDRESS INTO ADDRESS, CITY, STATE*/

SELECT PROPERTYADDRESS ,
SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS, 0, CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS)) AS ADDRESS,
SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS,CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS)+1,DATALENGTH(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS)) AS CITY
FROM DBO.NASHVILLEHOUSINGTABLE


ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
ADD ADDRESS NVARCHAR(255);


ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
ADD CITY NVARCHAR(64);

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET CITY = SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS, CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS)+1, DATALENGTH(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS))

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET ADDRESS = SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS, 0, CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.PROPERTYADDRESS))

SELECT *
FROM 
DBO.NASHVILLEHOUSINGTABLE

--EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.ADDRESS','SPLITADDRESS','COLUMN'

--EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.CITY','SPLITCITY','COLUMN'

-----

/*SPLITING OWNER'S ADDRESS IN THE SAME PROCESS WE SPLITTED PROPERTYADDRESS*/

SELECT OWNERADDRESS
FROM DBO.NASHVILLEHOUSINGTABLE


--SELECT DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,
--SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,0,CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS)) AS SPILTTEDOWNERSADDRESS,
--SUBSTRING(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS)+1,CHARINDEX(',',DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS)) AS SPILTTEDOWNERSCITY
--FROM DBO.NASHVILLEHOUSINGTABLE

SELECT DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,
PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),1) AS SPLITTEDOWNERSSTATE,
PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),2) AS SPLITTEDOWNERSCITY,
PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),3) AS SPLITTEDOWNERSADDRESS
FROM
DBO.NASHVILLEHOUSINGTABLE

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
ADD SPLITTEDOWNERSSTATE NVARCHAR(255);

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
ADD SPLITTEDOWNERSCITY NVARCHAR(255);

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
ADD SPLITTEDOWNERSADDRESS NVARCHAR(255);

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET SPLITTEDOWNERSSTATE = PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),1)

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET SPLITTEDOWNERSCITY = PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),2)

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET SPLITTEDOWNERSADDRESS = PARSENAME(REPLACE(DBO.NASHVILLEHOUSINGTABLE.OWNERADDRESS,',','.'),3)

SELECT * 
FROM DBO.NASHVILLEHOUSINGTABLE


EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.SPLITTEDOWNERSSTATE','OWNERSPLITSTATE','COLUMN'
EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.SPLITTEDOWNERSCITY','OWNERSPLITCITY','COLUMN'
EXEC SP_RENAME 'DBO.NASHVILLEHOUSINGTABLE.SPLITTEDOWNERSADDRESS','OWNERSPLITADDRESS','COLUMN'

-------


/*CHANGING Y AND N FIELDS TO YES AND NO FIELDS */

SELECT DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant
FROM DBO.NASHVILLEHOUSINGTABLE
WHERE DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant LIKE 'Y' OR DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant LIKE 'N'

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'Yes'
WHERE DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant LIKE 'Y' 

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'No'
WHERE DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant LIKE 'N' 

----#### ALTERNATIVE APPROACH IS BY USING A CASE STATEMENT    ####----

SELECT DISTINCT(DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant), COUNT(DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant)
FROM
DBO.NASHVILLEHOUSINGTABLE
GROUP BY DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant
ORDER BY DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant

SELECT DISTINCT(DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant),COUNT(DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant),
CASE 
WHEN DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'Y' THEN 'Yes'
WHEN DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'N' THEN 'No'
END
FROM
DBO.NASHVILLEHOUSINGTABLE
GROUP BY DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant
ORDER BY DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant

UPDATE DBO.NASHVILLEHOUSINGTABLE
SET DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 
CASE 
WHEN DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'Yes' THEN 'Y'
WHEN DBO.NASHVILLEHOUSINGTABLE.SoldAsVacant = 'No' THEN 'N'
END

----########----

------

/*DELETE UNUSED COLUMNS*/
/*MUST BE CONSULTED WITH THE TEAM BEFORE DELETION OF RAW DATA FILE
NOTE: RECOMMENDED TO CREATE A TEMPTABLE OR A VIEW AND WORK ON IT*/

/*FOR EXAMPLE PURPOSE WE WILL DROP COLUMN TAXDISTRICT,SALEDATE,PROPERTYADDREESS AND OWNERADDRESS FOR NOW*/

SELECT * 
FROM DBO.NASHVILLEHOUSINGTABLE

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
DROP COLUMN TAXDISTRICT

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
DROP COLUMN SALEDATE

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
DROP COLUMN PROPERTYADDRESS,OWNERADDRESS

ALTER TABLE DBO.NASHVILLEHOUSINGTABLE
DROP COLUMN SALEDATE
------
